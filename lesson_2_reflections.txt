What happens when you initialize a repository? Why do you need to do it?

When you initialize a repository it creates a place for git to store versions (commits) of your files. You need to do this so that you have someone to commit versions to. 



How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is where you put the files you wish to commit, while the repository holds commited versions/files and the working directory has the current commit. It add value are you can check to make sure all files you wish to commit are there, and you haven't made a mistake, before you commit. 



How can you use the staging area to make sure you have one commit per logical change?

You could add a file to it and then compare with the latest commit to see the changes, and then commit when you think you have one logical change since you last committed. 



What are some situations when branches would be helpful in keeping your history organized? How would branches help?

When I am experimenting with the code, but want to keep a working version the it would be good to have a branch. Or maybe there's two possible ways of doing something and I want to try both before deciding what's best. Branching would be helpful here as you are able to experiment with changes without altering the 'master' version.



How do the diagrams help you visualize the branch structure?

It helps because you can see what branches you have made (or other people) and how they relate to the master branch e.g. at what commit did it branch off, and what changes have been made to the master branch since it branched off. In that way you'll be able to tell what needs merging to what etc.



What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Merging two branches together will merge the changes of either branch from the common commit and store this version as a commit. All the commits in both branches are now stored in git log, and it is useful to represent in a diagram so that you can see the common commit and the different changes in each branch. 



What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
The pros of automatically merging is that you don't have to go through all the changes yourself and make manual changes. This would be time consuming and may make human errors. Automatically merging is faster, but it can't merge everything if there are conflicts as it is a complex process to know what to do. In git the combination of automatic merging first, then manually resolving conflicts is a good compromise between automation and being able to make individual decisions on conflicts. 